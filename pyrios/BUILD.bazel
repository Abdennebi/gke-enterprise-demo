# Copyright 2018 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

package(default_visibility = ["//visibility:public"])

load("@io_bazel_rules_docker//go:image.bzl", "go_image")

go_image(
    name = "app_image",
    srcs = ["main.go"],
    importpath = "github.com/GoogleCloudPlatform/gke-enterprise-demo/pyrios",
    deps = [
        "@com_google_cloud_go//compute/metadata:go_default_library",
        "@io_opencensus_go//trace:go_default_library",
        "@io_opencensus_go_contrib_exporter_stackdriver//:go_default_library",
        ],
    pure = "on",
)

load("@k8s_deploy//:defaults.bzl", "k8s_deploy",)
load("@k8s_service//:defaults.bzl", "k8s_service",)
load("@io_bazel_rules_k8s//k8s:object.bzl", "k8s_object")



k8s_defaults(
    name = "k8s_object",
    cluster = "//scripts:deploy_cluster",
    context = "//scripts:deploy_cluster",
    image_chroot = "//scripts:deploy_repo" + "{BUILD_USER}",
    namespace = "{BUILD_USER}",
)

k8s_defaults(
    name = "k8s_deploy",
    cluster = "//scripts:deploy_cluster",
    context = "//scripts:deploy_cluster",
    image_chroot = "//scripts:deploy_repo" + "{BUILD_USER}",
    namespace = "{BUILD_USER}",
    kind = "deployment",
)

[k8s_defaults(
    name = "k8s_" + kind,
    cluster = "//scripts:deploy_cluster",
    context = "//scripts:deploy_cluster",
    namespace = "{BUILD_USER}",
    kind = kind,
) for kind in [
    "service",
    "configmap",
    # add additional types of k8s objects in this array (including crds!) to manage them
]]



## Staging resources
k8s_deploy(
    name = "staging-deployment",
    images = {
        "pyrios:staging": ":app_image",
    },
    template = "//pyrios/manifest-templates:deployment.yaml",
)

k8s_service(
    name = "staging-service",
    template = "//pyrios/manifest-templates:service.yaml",
)

load("@io_bazel_rules_k8s//k8s:objects.bzl", "k8s_objects")

k8s_objects(
    name = "staging",
    objects = [
        ":staging-deployment",
        ":staging-service",
    ],
)

load("@k8s_deploy//:defaults.bzl", "k8s_deploy",)
load("@k8s_service//:defaults.bzl", "k8s_service",)

## Staging resources
k8s_deploy(
    name = "dev-deployment",
    images = {
        "us.gcr.io/pso-helmsman-cicd-infra/pyrios": ":app_image",
    },
    template = "//pyrios/manifest-templates:deployment.yaml",
)

k8s_service(
    name = "dev-service",
    template = "//pyrios/manifest-templates:service.yaml",
)

load("@io_bazel_rules_k8s//k8s:objects.bzl", "k8s_objects")

k8s_objects(
    name = "dev",
    objects = [
        ":dev-deployment",
        ":dev-service",
    ],
)


# ## developer resources
# load("@k8s_deploy//:defaults.bzl", "k8s_dev_deploy",)
# load("@k8s_service//:defaults.bzl", "k8s_dev_service", )
# k8s_deploy(
#     name = "dev-deployment",
#     images = {
#         "us.gcr.io/pso-helmsman-cicd-infra/pyrios:dev": ":app_image",
#     },
#     template = "//pyrios/manifest-templates/dev:deployment.yaml",
# )

# k8s_service(
#     name = "dev-service",
#     template = "//pyrios/manifest-templates/dev:service.yaml",
# )

# load("@io_bazel_rules_k8s//k8s:objects.bzl", "k8s_objects")

# k8s_objects(
#     name = "dev",
#     objects = [
#         ":dev-deployment",
#         ":dev-service",
#     ],
# )


